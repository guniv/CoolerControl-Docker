name: Build Docker Image on GitLab Release

on:
  schedule:
    - cron: '0 * * * *'  # Check every hour
  push:
    branches:
      - slim

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository (slim branch)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: slim

      # Fetch latest GitLab release tag
      - name: Get Latest GitLab Release
        id: get-release
        run: |
          PROJECT_ID="30707566"  # Replace with your GitLab project ID
          LATEST_TAG=$(curl -s "https://gitlab.com/api/v4/projects/$PROJECT_ID/releases/permalink/latest" | jq -r .tag_name)
          echo "LATEST_RELEASE=$LATEST_TAG" >> $GITHUB_OUTPUT

      # Check if release is new
      - name: Compare with Last Built Version
        id: check-version
        run: |
          if [ -f last_release.txt ]; then
            LAST_BUILT=$(cat last_release.txt)
          else
            LAST_BUILT=""
          fi

          if [[ "${{ steps.get-release.outputs.LATEST_RELEASE }}" != "$LAST_BUILT" ]]; then
            echo "NEW_RELEASE=true" >> $GITHUB_OUTPUT
            echo "New release detected: ${{ steps.get-release.outputs.LATEST_RELEASE }}"
          else
            echo "NEW_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      # Build and push ONLY if there's a new release
      - name: Set up Docker Buildx
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/docker
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and Push Docker Image
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        run: |
          docker build -t ghcr.io/guniv/cc-docker-slim:latest .
          docker push ghcr.io/guniv/cc-docker-slim:latest

      # Update last_release.txt if new release was processed
      - name: Update Release Tracker
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        run: |
          echo "${{ steps.get-release.outputs.LATEST_RELEASE }}" > last_release.txt
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add last_release.txt
          git commit -m "Update to ${{ steps.get-release.outputs.LATEST_RELEASE }}"
          git push
