name: Build Docker Image on GitLab Release

on:
  schedule:
    - cron: '0 * * * *'  # Check every hour
  push:
    branches:
      - slim

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: slim
          token: ${{ secrets.CR_PAT }}

      # Fetch latest GitLab tag
      - name: Get Latest GitLab Tag
        id: get-tag
        run: |
          PROJECT_ID="30707566"
          LATEST_TAG=$(curl -s "https://gitlab.com/api/v4/projects/$PROJECT_ID/repository/tags" | jq -r '.[0].name')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      # Compare versions
      - name: Compare with Last Built Version
        id: check-version
        run: |
          if [ -f last_release.txt ]; then
            LAST_BUILT=$(cat last_release.txt)
          else
            LAST_BUILT=""
          fi
          if [[ "${{ steps.get-tag.outputs.LATEST_TAG }}" != "$LAST_BUILT" ]]; then
            echo "NEW_RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "NEW_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      # Set up Docker Buildx with explicit cache directory
      - name: Set up Docker Buildx
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:latest
          buildkitd-config: |
            [worker.oci]
              enabled = false
            [worker.containerd]
              enabled = true

      # Create the cache directory explicitly
      - name: Create Cache Directory
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        run: |
          mkdir -p ~/.cache/docker

      - name: Cache Docker layers
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/docker
          key: ${{ runner.os }}-docker-cache-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-cache-

      - name: Log in to GitHub Container Registry
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and Push Docker Image
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        uses: docker/build-push-action@v5  # Use the dedicated action
        with:
          context: .
          push: true
          tags: ghcr.io/guniv/cc-docker-slim:latest
          cache-from: type=local,src=~/.cache/docker
          cache-to: type=local,dest=~/.cache/docker

      - name: Update Release Tracker
        if: steps.check-version.outputs.NEW_RELEASE == 'true'
        run: |
          echo "${{ steps.get-tag.outputs.LATEST_TAG }}" > last_release.txt
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add last_release.txt
          git commit -m "Update to ${{ steps.get-tag.outputs.LATEST_TAG }}"
          git push https://${{ github.actor }}:${{ secrets.CR_PAT }}@github.com/${{ github.repository }}.git HEAD:slim
