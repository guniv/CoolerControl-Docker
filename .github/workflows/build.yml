name: Build and Release Docker Image
permissions:
  contents: write  # Needed for creating releases
  packages: write  # Needed for pushing Docker images

on:
  schedule:
    - cron: '30 15 * * *' #Check once a day for new versions
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'entrypoint.sh'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: guniv/coolercontrol-docker
  PROJECT_ID: 30707566  # Your GitLab project ID

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for full commit history

      - name: Version Setup
        id: version
        env:
          GH_TOKEN: ${{ github.token }}  # Use automatic token
        run: |
          # Get upstream version
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            UPSTREAM_TAG=$(curl -s "https://gitlab.com/api/v4/projects/$PROJECT_ID/repository/tags" | jq -r '.[0].name')
            IS_NEW_UPSTREAM=true
          else
            UPSTREAM_TAG=$(cat last_release.txt || echo "v0.0.0")
            IS_NEW_UPSTREAM=false
          fi

          # Get Docker build number
          DOCKER_BUILD=1
          RELEASES=$(gh release list --exclude-drafts --exclude-pre-releases -L 50)
          while grep -q "^${UPSTREAM_TAG}-docker${DOCKER_BUILD}\b" <<< "$RELEASES"; do
            ((DOCKER_BUILD++))
          done

          echo "UPSTREAM_VERSION=$UPSTREAM_TAG" >> $GITHUB_OUTPUT
          echo "DOCKER_BUILD=$DOCKER_BUILD" >> $GITHUB_OUTPUT
          echo "IS_NEW_UPSTREAM=$IS_NEW_UPSTREAM" >> $GITHUB_OUTPUT

      # Build and tag with appropriate versions
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.UPSTREAM_VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
          cache-from: type=local,src=~/.cache/docker
          cache-to: type=local,dest=~/.cache/docker

      # Create GitHub Release with notes
      - name: Generate Release Notes
        id: release-notes
        run: |
          NOTES_FILE="release_notes.md"
          
          # Upstream release notes (for scheduled builds)
          if [[ "${{ steps.version.outputs.IS_NEW_UPSTREAM }}" == "true" ]]; then
            curl -s --header "PRIVATE-TOKEN: ${{ secrets.GL_PAT }}" \
              "https://gitlab.com/api/v4/projects/30707566/releases/${{ steps.version.outputs.UPSTREAM_VERSION }}" \
              | jq -r '.description' > upstream_notes.md
          fi

          # Docker changes (always included)
          git log --pretty=format:"- %s" --since="$(git log -1 --format=%cd --date=iso-strict origin/main)" -- Dockerfile entrypoint.sh > docker_changes.md

          # Combine notes
          echo "# Release Notes" > $NOTES_FILE
          [[ -s upstream_notes.md ]] && echo "## Upstream Changes" >> $NOTES_FILE && cat upstream_notes.md >> $NOTES_FILE
          echo -e "\n## Docker Image Updates" >> $NOTES_FILE
          cat docker_changes.md >> $NOTES_FILE

          echo "NOTES_FILE=$NOTES_FILE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
          name: ${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
          body_path: ${{ steps.release-notes.outputs.NOTES_FILE }}
          draft: false
          prerelease: false

      # Update tracker for scheduled builds
      - name: Update Version Tracker
        if: steps.version.outputs.IS_NEW_UPSTREAM == 'true'
        run: |
          echo "${{ steps.version.outputs.UPSTREAM_VERSION }}" > last_release.txt
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add last_release.txt
          git commit -m "Track upstream version ${{ steps.version.outputs.UPSTREAM_VERSION }}"
          git push origin main
