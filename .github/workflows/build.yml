name: Build and Release Docker Image

on:
  workflow_run:
    workflows: ["Check Upstream Version"]  # Name of your first workflow
    types:
      - completed
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'entrypoint.sh'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: guniv/coolercontrol-docker
  PROJECT_ID: 30707566  # GitLab project ID

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for GHCR push
      id-token: write  # Required for OIDC token exchange

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add Docker login step
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/guniv/coolercontrol-docker:latest
            ghcr.io/guniv/coolercontrol-docker:${{ steps.version.outputs.UPSTREAM_VERSION }}
            ghcr.io/guniv/coolercontrol-docker:${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
          # Temporarily remove cache config for debugging
          # cache-from: type=local,src=.docker-cache
          # cache-to: type=local,dest=.docker-cache

      - name: Generate Release Notes
        id: release-notes
        run: |
          NOTES_FILE="release_notes.md"
          
          # Get upstream release notes if new version
          if [[ "${{ steps.version.outputs.IS_NEW_UPSTREAM }}" == "true" ]]; then
            curl -s --header "PRIVATE-TOKEN: ${{ secrets.GL_PAT }}" \
              "https://gitlab.com/api/v4/projects/$PROJECT_ID/releases/${{ steps.version.outputs.UPSTREAM_VERSION }}" \
              | jq -r '.description' > upstream_notes.md
          fi

          # Get Dockerfile changes since last build
          SINCE_DATE=$(git log -1 --format=%cd --date=iso-strict origin/main)
          git log --pretty=format:"- %s" --since="$SINCE_DATE" -- Dockerfile entrypoint.sh > docker_changes.md

          # Combine notes
          echo "# Release Notes" > $NOTES_FILE
          [[ -s upstream_notes.md ]] && echo "## Upstream Changes" >> $NOTES_FILE && cat upstream_notes.md >> $NOTES_FILE
          echo -e "\n## Docker Image Updates" >> $NOTES_FILE
          cat docker_changes.md >> $NOTES_FILE

          echo "NOTES_FILE=$NOTES_FILE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
          name: ${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
          body_path: ${{ steps.release-notes.outputs.NOTES_FILE }}
          draft: false
          prerelease: false

      - name: Update Version Tracker
        if: steps.version.outputs.IS_NEW_UPSTREAM == 'true'
        run: |
          echo "${{ steps.version.outputs.UPSTREAM_VERSION }}" > last_release.txt
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add last_release.txt
          git commit -m "Track upstream version ${{ steps.version.outputs.UPSTREAM_VERSION }}"
          git push origin main
