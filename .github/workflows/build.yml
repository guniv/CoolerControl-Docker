name: Build and Release Docker Image

on:
  workflow_run:
    workflows: ["Check Upstream Version"]
    types:
      - completed
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'entrypoint.sh'
      - 'last_release.txt'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

env:
  GHCR_IMAGE_NAME: guniv/coolercontrol-docker
  DOCKERHUB_IMAGE_NAME: gunivx/coolercontrol-docker
  REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  PROJECT_ID: 30707566

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Version and Build Number
        id: version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if [[ -f new_version.txt ]]; then
            UPSTREAM_TAG=$(cat new_version.txt)
            LAST_RELEASE=$(cat last_release.txt 2>/dev/null || echo "")
            
            # Validate if the version is actually new
            if [[ "$UPSTREAM_TAG" != "$LAST_RELEASE" ]]; then
              IS_NEW_UPSTREAM=true
              echo "Detected new version: $UPSTREAM_TAG"
            else
              IS_NEW_UPSTREAM=false
              echo "No new version. Removing trigger file..."
              rm -f new_version.txt
            fi
            
            # Remove trigger file if it still exists and commit the change
            if [ -f new_version.txt ]; then
              git rm new_version.txt
              git commit -m "Remove version trigger file" || echo "No changes to commit"
              git push origin main || echo "Push failed or no changes"
            fi
          else
            UPSTREAM_TAG=$(cat last_release.txt || echo "v0.0.0")
            IS_NEW_UPSTREAM=false
          fi

          # Define a build number. Adjust logic as needed.
          DOCKER_BUILD=1
          
          # Set outputs so they can be used by later steps
          echo "UPSTREAM_VERSION=${UPSTREAM_TAG}" >> $GITHUB_OUTPUT
          echo "DOCKER_BUILD=${DOCKER_BUILD}" >> $GITHUB_OUTPUT
          echo "IS_NEW_UPSTREAM=${IS_NEW_UPSTREAM}" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
      
      - name: Build and Push Docker Image
        if: steps.version.outputs.IS_NEW_UPSTREAM == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ steps.version.outputs.UPSTREAM_VERSION }}
            ${{ env.REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ steps.version.outputs.UPSTREAM_VERSION }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
            
      - name: Generate Release Notes
        id: release-notes
        run: |
          NOTES_FILE="release_notes.md"
          touch $NOTES_FILE
          
          if [[ "${{ steps.version.outputs.IS_NEW_UPSTREAM }}" == "true" ]]; then
            # Get and clean upstream release notes
            curl -s --header "PRIVATE-TOKEN: ${{ secrets.GL_PAT }}" \
              "https://gitlab.com/api/v4/projects/$PROJECT_ID/releases/${{ steps.version.outputs.UPSTREAM_VERSION }}" \
              | jq -r '.description' | sed 's/ (![0-9]\+)//g' > upstream_notes.md
            
            if [[ -s upstream_notes.md ]]; then
              echo "## CoolerControl Changes" >> $NOTES_FILE
              cat upstream_notes.md >> $NOTES_FILE
              echo -e "\n[View full release notes](https://gitlab.com/coolercontrol/coolercontrol/-/releases/${{ steps.version.outputs.UPSTREAM_VERSION}})" >> $NOTES_FILE
            fi
          fi

          SINCE_DATE=$(git log -1 --format=%cd --date=iso-strict origin/main)
          git log --pretty=format:"- %s" --since="$SINCE_DATE" -- Dockerfile entrypoint.sh > docker_changes.md

          if [[ -s docker_changes.md ]]; then
            echo -e "\n## Docker-specific Updates" >> $NOTES_FILE
            cat docker_changes.md >> $NOTES_FILE
          fi

          echo "NOTES_FILE=$NOTES_FILE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.version.outputs.IS_NEW_UPSTREAM == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.UPSTREAM_VERSION }}-docker${{ steps.version.outputs.DOCKER_BUILD }}
          name: ${{ steps.version.outputs.UPSTREAM_VERSION }}${{ steps.version.outputs.IS_NEW_UPSTREAM != 'true' && format('-docker{0}', steps.version.outputs.DOCKER_BUILD) || '' }}
          body_path: ${{ steps.release-notes.outputs.NOTES_FILE }}
          draft: false
          prerelease: false

      - name: Update Version Tracker
        if: steps.version.outputs.IS_NEW_UPSTREAM == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Reset any changes except last_release.txt
          git reset --hard HEAD
          git clean -fd
          
          echo "${{ steps.version.outputs.UPSTREAM_VERSION }}" > last_release.txt
          git add last_release.txt
          git commit -m "Track upstream version ${{ steps.version.outputs.UPSTREAM_VERSION }}"
          git push origin main
