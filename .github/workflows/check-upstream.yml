name: Check Upstream Version

on:
  schedule:
    - cron: '30 15 * * *'  # Daily check
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Latest Upstream Tag
        id: get-tag
        env:
          PROJECT_ID: 30707566
        run: |
          LATEST_TAG=$(curl -s "https://gitlab.com/api/v4/projects/$PROJECT_ID/repository/tags" | jq -r '.[0].name')
          echo "UPSTREAM_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Verify AppImage Availability
        id: verify-appimage
        env:
          GL_PAT: ${{ secrets.GL_PAT }}  # Add authentication
        run: |
          CC_VERSION=${{ steps.get-tag.outputs.UPSTREAM_TAG}}
          URL="https://gitlab.com/coolercontrol/coolercontrol/-/releases/${CC_VERSION}/downloads/packages/CoolerControlD-x86_64.AppImage"
          
          # Add required headers and follow redirects
          STATUS_CODE=$(curl -sL \
            -H "PRIVATE-TOKEN: $GL_PAT" \
            -H "User-Agent: GitHub-Actions" \
            -o /dev/null \
            -w "%{http_code}" \
            "$URL")
          
          echo "Debug - URL: $URL"  # Verify URL construction
          echo "Debug - Status: $STATUS_CODE"  # See actual response
          
          if [ "$STATUS_CODE" -eq 200 ]; then
            echo "APPIMAGE_AVAILABLE=true" >> $GITHUB_OUTPUT
          else
            echo "APPIMAGE_AVAILABLE=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create Version Check File
        if: steps.verify-appimage.outputs.APPIMAGE_AVAILABLE == 'true'
        run: |
          echo "${{ steps.get-tag.outputs.UPSTREAM_TAG }}" > new_version.txt
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add new_version.txt
          git commit -m "New upstream version detected: ${{ steps.get-tag.outputs.UPSTREAM_TAG }}"
          git push origin main
